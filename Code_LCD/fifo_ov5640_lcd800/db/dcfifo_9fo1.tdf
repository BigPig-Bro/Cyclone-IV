--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone IV E" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=16384 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=16 LPM_WIDTHU=14 LPM_WIDTHU_R=14 OVERFLOW_CHECKING="OFF" RAM_BLOCK_TYPE="M9K" RDSYNC_DELAYPIPE=3 READ_ACLR_SYNCH="ON" UNDERFLOW_CHECKING="OFF" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=3 aclr data q rdclk rdreq rdusedw wrclk wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone IV E" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=M9K" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 20.1 cbx_a_gray2bin 2020:11:11:17:06:45:SJ cbx_a_graycounter 2020:11:11:17:06:45:SJ cbx_altdpram 2020:11:11:17:06:45:SJ cbx_altera_counter 2020:11:11:17:06:45:SJ cbx_altera_gray_counter 2020:11:11:17:06:45:SJ cbx_altera_syncram 2020:11:11:17:06:45:SJ cbx_altera_syncram_nd_impl 2020:11:11:17:06:45:SJ cbx_altsyncram 2020:11:11:17:06:45:SJ cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_dcfifo 2020:11:11:17:06:45:SJ cbx_fifo_common 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_counter 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_lpm_mux 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_scfifo 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_stratixiii 2020:11:11:17:06:46:SJ cbx_stratixv 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_gray2bin_bib (gray[14..0])
RETURNS ( bin[14..0]);
FUNCTION a_graycounter_a77 (aclr, clock, cnt_en)
RETURNS ( q[14..0]);
FUNCTION a_graycounter_6lc (aclr, clock, cnt_en)
RETURNS ( q[14..0]);
FUNCTION altsyncram_du81 (aclr1, address_a[13..0], address_b[13..0], addressstall_b, clock0, clock1, clocken1, data_a[15..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION dffpipe_3dc (clock, clrn, d[0..0])
RETURNS ( q[0..0]);
FUNCTION dffpipe_te9 (clock, clrn, d[14..0])
RETURNS ( q[14..0]);
FUNCTION alt_synch_pipe_5e8 (clock, clrn, d[14..0])
RETURNS ( q[14..0]);
FUNCTION alt_synch_pipe_3e8 (clock, clrn, d[14..0])
RETURNS ( q[14..0]);
FUNCTION cmpr_e66 (dataa[7..0], datab[7..0])
RETURNS ( aeb);
FUNCTION cmpr_d66 (dataa[6..0], datab[6..0])
RETURNS ( aeb);
FUNCTION mux_j28 (data[1..0], sel[0..0])
RETURNS ( result[0..0]);

--synthesis_resources = lut 16 M9K 32 reg 67 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 1;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;suppress_da_rule_internal=R105;{-to rdemp_eq_comp_lsb_aeb} POWER_UP_LEVEL=HIGH;{-to rdemp_eq_comp_msb_aeb} POWER_UP_LEVEL=HIGH;{-to wrptr_g} suppress_da_rule_internal=S102;{-to wrptr_g} POWER_UP_LEVEL=LOW;-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe_1f9:dffpipe6|dffe7a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_1f9:dffpipe6|dffe7a* """;

SUBDESIGN dcfifo_9fo1
( 
	aclr	:	input;
	data[15..0]	:	input;
	q[15..0]	:	output;
	rdclk	:	input;
	rdreq	:	input;
	rdusedw[13..0]	:	output;
	wrclk	:	input;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g_gray2bin : a_gray2bin_bib;
	rs_dgwp_gray2bin : a_gray2bin_bib;
	rdptr_g1p : a_graycounter_a77;
	wrptr_g1p : a_graycounter_6lc;
	fifo_ram : altsyncram_du81;
	delayed_wrptr_g[14..0] : dffe;
	rdemp_eq_comp_lsb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdemp_eq_comp_msb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdptr_g[14..0] : dffe;
	wrfull_eq_comp_lsb_mux_reg : dffe;
	wrfull_eq_comp_msb_mux_reg : dffe;
	wrptr_g[14..0] : dffe
		WITH (
			power_up = "low"
		);
	rdaclr : dffpipe_3dc;
	rs_brp : dffpipe_te9;
	rs_bwp : dffpipe_te9;
	rs_dgwp : alt_synch_pipe_5e8;
	ws_dgrp : alt_synch_pipe_3e8;
	rdusedw_sub_dataa[14..0]	:	WIRE;
	rdusedw_sub_datab[14..0]	:	WIRE;
	rdusedw_sub_result[14..0]	:	WIRE;
	rdempty_eq_comp1_lsb : cmpr_e66;
	rdempty_eq_comp1_msb : cmpr_d66;
	rdempty_eq_comp_lsb : cmpr_e66;
	rdempty_eq_comp_msb : cmpr_d66;
	wrfull_eq_comp1_lsb : cmpr_e66;
	wrfull_eq_comp1_msb : cmpr_d66;
	wrfull_eq_comp_lsb : cmpr_e66;
	wrfull_eq_comp_msb : cmpr_d66;
	rdemp_eq_comp_lsb_mux : mux_j28;
	rdemp_eq_comp_msb_mux : mux_j28;
	wrfull_eq_comp_lsb_mux : mux_j28;
	wrfull_eq_comp_msb_mux : mux_j28;
	ram_address_a[13..0]	: WIRE;
	ram_address_b[13..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_g1s[14..0]	: WIRE;
	wrptr_gs[14..0]	: WIRE;

BEGIN 
	rdptr_g_gray2bin.gray[14..0] = rdptr_g[14..0].q;
	rs_dgwp_gray2bin.gray[14..0] = rs_dgwp.q[14..0];
	rdptr_g1p.aclr = (! rdaclr.q[]);
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = valid_rdreq;
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = (! rdaclr.q[]);
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_g[].q;
	rdemp_eq_comp_lsb_aeb.clk = rdclk;
	rdemp_eq_comp_lsb_aeb.d = rdemp_eq_comp_lsb_mux.result[];
	rdemp_eq_comp_lsb_aeb.prn = rdaclr.q[];
	rdemp_eq_comp_msb_aeb.clk = rdclk;
	rdemp_eq_comp_msb_aeb.d = rdemp_eq_comp_msb_mux.result[];
	rdemp_eq_comp_msb_aeb.prn = rdaclr.q[];
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = rdaclr.q[];
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrfull_eq_comp_lsb_mux_reg.clk = wrclk;
	wrfull_eq_comp_lsb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_lsb_mux_reg.d = wrfull_eq_comp_lsb_mux.result[];
	wrfull_eq_comp_msb_mux_reg.clk = wrclk;
	wrfull_eq_comp_msb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_msb_mux_reg.d = wrfull_eq_comp_msb_mux.result[];
	wrptr_g[].clk = wrclk;
	wrptr_g[].clrn = (! aclr);
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rdaclr.clock = rdclk;
	rdaclr.clrn = (! aclr);
	rdaclr.d[] = B"1";
	rs_brp.clock = rdclk;
	rs_brp.clrn = rdaclr.q[];
	rs_brp.d[] = rdptr_g_gray2bin.bin[];
	rs_bwp.clock = rdclk;
	rs_bwp.clrn = rdaclr.q[];
	rs_bwp.d[] = rs_dgwp_gray2bin.bin[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = rdaclr.q[];
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdusedw_sub_result[] = rdusedw_sub_dataa[] - rdusedw_sub_datab[];
	rdusedw_sub_dataa[] = rs_bwp.q[];
	rdusedw_sub_datab[] = rs_brp.q[];
	rdempty_eq_comp1_lsb.dataa[7..0] = delayed_wrptr_g[7..0].q;
	rdempty_eq_comp1_lsb.datab[7..0] = rdptr_g1p.q[7..0];
	rdempty_eq_comp1_msb.dataa[6..0] = delayed_wrptr_g[14..8].q;
	rdempty_eq_comp1_msb.datab[6..0] = rdptr_g1p.q[14..8];
	rdempty_eq_comp_lsb.dataa[7..0] = delayed_wrptr_g[7..0].q;
	rdempty_eq_comp_lsb.datab[7..0] = rdptr_g[7..0].q;
	rdempty_eq_comp_msb.dataa[6..0] = delayed_wrptr_g[14..8].q;
	rdempty_eq_comp_msb.datab[6..0] = rdptr_g[14..8].q;
	wrfull_eq_comp1_lsb.dataa[7..0] = rdptr_g[7..0].q;
	wrfull_eq_comp1_lsb.datab[7..0] = wrptr_g1s[7..0];
	wrfull_eq_comp1_msb.dataa[6..0] = rdptr_g[14..8].q;
	wrfull_eq_comp1_msb.datab[6..0] = wrptr_g1s[14..8];
	wrfull_eq_comp_lsb.dataa[7..0] = rdptr_g[7..0].q;
	wrfull_eq_comp_lsb.datab[7..0] = wrptr_gs[7..0];
	wrfull_eq_comp_msb.dataa[6..0] = rdptr_g[14..8].q;
	wrfull_eq_comp_msb.datab[6..0] = wrptr_gs[14..8];
	rdemp_eq_comp_lsb_mux.data[] = ( rdempty_eq_comp1_lsb.aeb, rdempty_eq_comp_lsb.aeb);
	rdemp_eq_comp_lsb_mux.sel[] = valid_rdreq;
	rdemp_eq_comp_msb_mux.data[] = ( rdempty_eq_comp1_msb.aeb, rdempty_eq_comp_msb.aeb);
	rdemp_eq_comp_msb_mux.sel[] = valid_rdreq;
	wrfull_eq_comp_lsb_mux.data[] = ( wrfull_eq_comp1_lsb.aeb, wrfull_eq_comp_lsb.aeb);
	wrfull_eq_comp_lsb_mux.sel[] = valid_wrreq;
	wrfull_eq_comp_msb_mux.data[] = ( wrfull_eq_comp1_msb.aeb, wrfull_eq_comp_msb.aeb);
	wrfull_eq_comp_msb_mux.sel[] = valid_wrreq;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[14..14].q $ wrptr_g[13..13].q), wrptr_g[12..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[14..14] $ rdptr_g1p.q[13..13]), rdptr_g1p.q[12..0]);
	rdusedw[] = ( rdusedw_sub_result[13..0]);
	valid_rdreq = (rdreq & rdaclr.q[]);
	valid_wrreq = wrreq;
	wrptr_g1s[] = ( (! wrptr_g1p.q[14..14]), (! wrptr_g1p.q[13..13]), wrptr_g1p.q[12..0]);
	wrptr_gs[] = ( (! wrptr_g[14..14].q), (! wrptr_g[13..13].q), wrptr_g[12..0].q);
END;
--VALID FILE
