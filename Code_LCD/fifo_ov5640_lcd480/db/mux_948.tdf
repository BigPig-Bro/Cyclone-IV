--lpm_mux DEVICE_FAMILY="Cyclone IV E" LPM_SIZE=2 LPM_WIDTH=16 LPM_WIDTHS=1 data result sel
--VERSION_BEGIN 20.1 cbx_lpm_mux 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN mux_948
( 
	data[31..0]	:	input;
	result[15..0]	:	output;
	sel[0..0]	:	input;
) 
VARIABLE 
	result_node[15..0]	: WIRE;
	sel_node[0..0]	: WIRE;
	w_data683w[1..0]	: WIRE;
	w_data697w[1..0]	: WIRE;
	w_data709w[1..0]	: WIRE;
	w_data721w[1..0]	: WIRE;
	w_data733w[1..0]	: WIRE;
	w_data745w[1..0]	: WIRE;
	w_data757w[1..0]	: WIRE;
	w_data769w[1..0]	: WIRE;
	w_data781w[1..0]	: WIRE;
	w_data793w[1..0]	: WIRE;
	w_data805w[1..0]	: WIRE;
	w_data817w[1..0]	: WIRE;
	w_data829w[1..0]	: WIRE;
	w_data841w[1..0]	: WIRE;
	w_data853w[1..0]	: WIRE;
	w_data865w[1..0]	: WIRE;

BEGIN 
	result[] = result_node[];
	result_node[] = ( ((sel_node[] & w_data865w[1..1]) # ((! sel_node[]) & w_data865w[0..0])), ((sel_node[] & w_data853w[1..1]) # ((! sel_node[]) & w_data853w[0..0])), ((sel_node[] & w_data841w[1..1]) # ((! sel_node[]) & w_data841w[0..0])), ((sel_node[] & w_data829w[1..1]) # ((! sel_node[]) & w_data829w[0..0])), ((sel_node[] & w_data817w[1..1]) # ((! sel_node[]) & w_data817w[0..0])), ((sel_node[] & w_data805w[1..1]) # ((! sel_node[]) & w_data805w[0..0])), ((sel_node[] & w_data793w[1..1]) # ((! sel_node[]) & w_data793w[0..0])), ((sel_node[] & w_data781w[1..1]) # ((! sel_node[]) & w_data781w[0..0])), ((sel_node[] & w_data769w[1..1]) # ((! sel_node[]) & w_data769w[0..0])), ((sel_node[] & w_data757w[1..1]) # ((! sel_node[]) & w_data757w[0..0])), ((sel_node[] & w_data745w[1..1]) # ((! sel_node[]) & w_data745w[0..0])), ((sel_node[] & w_data733w[1..1]) # ((! sel_node[]) & w_data733w[0..0])), ((sel_node[] & w_data721w[1..1]) # ((! sel_node[]) & w_data721w[0..0])), ((sel_node[] & w_data709w[1..1]) # ((! sel_node[]) & w_data709w[0..0])), ((sel_node[] & w_data697w[1..1]) # ((! sel_node[]) & w_data697w[0..0])), ((sel_node[] & w_data683w[1..1]) # ((! sel_node[]) & w_data683w[0..0])));
	sel_node[] = ( sel[0..0]);
	w_data683w[] = ( data[16..16], data[0..0]);
	w_data697w[] = ( data[17..17], data[1..1]);
	w_data709w[] = ( data[18..18], data[2..2]);
	w_data721w[] = ( data[19..19], data[3..3]);
	w_data733w[] = ( data[20..20], data[4..4]);
	w_data745w[] = ( data[21..21], data[5..5]);
	w_data757w[] = ( data[22..22], data[6..6]);
	w_data769w[] = ( data[23..23], data[7..7]);
	w_data781w[] = ( data[24..24], data[8..8]);
	w_data793w[] = ( data[25..25], data[9..9]);
	w_data805w[] = ( data[26..26], data[10..10]);
	w_data817w[] = ( data[27..27], data[11..11]);
	w_data829w[] = ( data[28..28], data[12..12]);
	w_data841w[] = ( data[29..29], data[13..13]);
	w_data853w[] = ( data[30..30], data[14..14]);
	w_data865w[] = ( data[31..31], data[15..15]);
END;
--VALID FILE
