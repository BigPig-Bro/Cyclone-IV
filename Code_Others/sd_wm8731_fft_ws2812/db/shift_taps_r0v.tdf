--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" NUMBER_OF_TAPS=1 POWER_UP_STATE="DONT_CARE" TAP_DISTANCE=248 WIDTH=9 clock shiftin taps ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 20.1 cbx_altdpram 2020:11:11:17:06:45:SJ cbx_altera_counter 2020:11:11:17:06:45:SJ cbx_altera_syncram 2020:11:11:17:06:45:SJ cbx_altera_syncram_nd_impl 2020:11:11:17:06:45:SJ cbx_altshift_taps 2020:11:11:17:06:45:SJ cbx_altsyncram 2020:11:11:17:06:45:SJ cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_counter 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_lpm_mux 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_stratixiii 2020:11:11:17:06:46:SJ cbx_stratixv 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION altsyncram_pv91 (address_a[7..0], address_b[7..0], clock0, clock1, clocken0, clocken1, data_a[8..0], wren_a)
RETURNS ( q_b[8..0]);
FUNCTION cntr_9lf (clk_en, clock)
RETURNS ( q[7..0]);

--synthesis_resources = lut 26 M10K 1 reg 16 
SUBDESIGN shift_taps_r0v
( 
	clock	:	input;
	shiftin[8..0]	:	input;
	shiftout[8..0]	:	output;
	taps[8..0]	:	output;
) 
VARIABLE 
	altsyncram5 : altsyncram_pv91;
	dffe3a[7..0] : dffe;
	add_sub2_dataa[7..0]	:	WIRE;
	add_sub2_datab[7..0]	:	WIRE;
	add_sub2_result[7..0]	:	WIRE;
	cmpr4_aeb_int	:	WIRE;
	cmpr4_agb_int	:	WIRE;
	cmpr4_ageb	:	WIRE;
	cmpr4_dataa[7..0]	:	WIRE;
	cmpr4_datab[7..0]	:	WIRE;
	cntr1 : cntr_9lf;
	clken	: NODE;
	rdaddress[7..0]	: WIRE;
	reset_const[7..0]	: WIRE;
	std_const[7..0]	: WIRE;

BEGIN 
	altsyncram5.address_a[] = cntr1.q[];
	altsyncram5.address_b[] = rdaddress[];
	altsyncram5.clock0 = clock;
	altsyncram5.clock1 = clock;
	altsyncram5.clocken0 = clken;
	altsyncram5.clocken1 = clken;
	altsyncram5.data_a[] = ( shiftin[]);
	altsyncram5.wren_a = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( add_sub2_result[7..2], (! add_sub2_result[1..1]), add_sub2_result[0..0]);
	dffe3a[].ena = clken;
	add_sub2_result[] = add_sub2_dataa[] + add_sub2_datab[];
	add_sub2_dataa[] = cntr1.q[];
	add_sub2_datab[] = ((cmpr4_ageb & reset_const[]) # ((! cmpr4_ageb) & std_const[]));
	IF (cmpr4_dataa[] == cmpr4_datab[]) THEN
		cmpr4_aeb_int = VCC;
	ELSE
		cmpr4_aeb_int = GND;
	END IF;
	IF (cmpr4_dataa[] > cmpr4_datab[]) THEN
		cmpr4_agb_int = VCC;
	ELSE
		cmpr4_agb_int = GND;
	END IF;
	cmpr4_ageb = cmpr4_agb_int # cmpr4_aeb_int;
	cmpr4_dataa[] = cntr1.q[];
	cmpr4_datab[] = B"11110101";
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	clken = VCC;
	rdaddress[] = ( dffe3a[7..2].q, (! dffe3a[1..1].q), dffe3a[0..0].q);
	reset_const[] = B"00001011";
	shiftout[8..0] = altsyncram5.q_b[8..0];
	std_const[] = B"00000011";
	taps[] = altsyncram5.q_b[];
END;
--VALID FILE
