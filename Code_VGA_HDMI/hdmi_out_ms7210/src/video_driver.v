//****************************************Copyright (c)***********************************//
//Ô­ï¿½Ó¸ï¿½ï¿½ï¿½ï¿½ß½ï¿½Ñ§Æ½Ì¨ï¿½ï¿½www.yuanzige.com
//ï¿½ï¿½ï¿½ï¿½Ö§ï¿½Ö£ï¿½www.openedv.com
//ï¿½Ô±ï¿½ï¿½ï¿½ï¿½Ì£ï¿½http://openedv.taobao.com
//ï¿½ï¿½×¢Î¢ï¿½Å¹ï¿½ï¿½ï¿½Æ½Ì¨Î¢ï¿½ÅºÅ£ï¿½"ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½"ï¿½ï¿½ï¿½ï¿½Ñ»ï¿½È?ZYNQ & FPGA & STM32 & LINUXï¿½ï¿½ï¿½Ï¡ï¿½
//ï¿½ï¿½È¨ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½Ø¾ï¿½ï¿½ï¿?
//Copyright(C) ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½ 2018-2028
//All rights reserved
//----------------------------------------------------------------------------------------
// File name:           video_driver
// Last modified Date:  2020/05/28 20:28:08
// Last Version:        V1.0
// Descriptions:        ï¿½ï¿½Æµï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½
//                      
//----------------------------------------------------------------------------------------
// Created by:          ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½
// Created date:        2020/05/28 20:28:08
// Version:             V1.0
// Descriptions:        The original version
//
//----------------------------------------------------------------------------------------
//****************************************************************************************//

module video_driver(
    input           	pixel_clk	,
    input           	sys_rst_n	,
		
    //RGBï¿½Ó¿ï¿½	
    output          	video_hs	,     //ï¿½ï¿½Í¬ï¿½ï¿½ï¿½Åºï¿½
    output          	video_vs	,     //ï¿½ï¿½Í¬ï¿½ï¿½ï¿½Åºï¿½
    output          	video_de	,     //ï¿½ï¿½ï¿½ï¿½Ê¹ï¿½ï¿½
    output  	[23:0]  video_rgb	,     //RGB888ï¿½ï¿½É«ï¿½ï¿½ï¿½ï¿½
    output	reg			data_req 	,
	
    input   	[23:0]  pixel_data	,     //ï¿½ï¿½ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½
    output  reg	[12:0]  pixel_xpos	,     //ï¿½ï¿½ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
    output  reg	[12:0]  pixel_ypos        //ï¿½ï¿½ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
);

//parameter define
//1280*720 ï¿½Ö±ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿?  75m
//parameter  H_SYNC   =  11'd40;   //ï¿½ï¿½Í¬ï¿½ï¿½
//parameter  H_BACK   =  11'd220;  //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
//parameter  H_DISP   =  11'd1280; //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
//parameter  H_FRONT  =  11'd110;  //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
//parameter  H_TOTAL  =  11'd1650; //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//parameter  V_SYNC   =  11'd5;    //ï¿½ï¿½Í¬ï¿½ï¿½
//parameter  V_BACK   =  11'd20;   //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
//parameter  V_DISP   =  11'd720;  //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
//parameter  V_FRONT  =  11'd5;    //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
//parameter  V_TOTAL  =  11'd750;  //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//1920*1080ï¿½Ö±ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿? 150m
// parameter  H_SYNC   =  12'd44;   //ï¿½ï¿½Í¬ï¿½ï¿½
// parameter  H_BACK   =  12'd148;  //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
// parameter  H_DISP   =  12'd1920; //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
// parameter  H_FRONT  =  12'd88;  //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
// parameter  H_TOTAL  =  12'd2200; //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

// parameter  V_SYNC   =  12'd5;    //ï¿½ï¿½Í¬ï¿½ï¿½
// parameter  V_BACK   =  12'd36;   //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
// parameter  V_DISP   =  12'd1080;  //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
// parameter  V_FRONT  =  12'd4;    //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
// parameter  V_TOTAL  =  12'd1125;  //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//3840*2160ï¿½Ö±ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿?  300m
parameter  H_SYNC   =  13'd88;   //ï¿½ï¿½Í¬ï¿½ï¿½
parameter  H_BACK   =  13'd296;  //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
parameter  H_DISP   =  13'd3840; //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
parameter  H_FRONT  =  13'd176;  //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
parameter  H_TOTAL  =  13'd4400; //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

parameter  V_SYNC   =  12'd10;    //ï¿½ï¿½Í¬ï¿½ï¿½
parameter  V_BACK   =  12'd72;   //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
parameter  V_DISP   =  12'd2160;  //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
parameter  V_FRONT  =  12'd8;    //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
parameter  V_TOTAL  =  12'd2250;  //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//2560*1600ï¿½Ö±ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿? 270m
//parameter  H_SYNC   =  13'd32;   //ï¿½ï¿½Í¬ï¿½ï¿½
//parameter  H_BACK   =  13'd80;  //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
//parameter  H_DISP   =  13'd2560; //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
//parameter  H_FRONT  =  13'd48;  //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
//parameter  H_TOTAL  =  13'd2720; //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//parameter  V_SYNC   =  12'd6;    //ï¿½ï¿½Í¬ï¿½ï¿½
//parameter  V_BACK   =  12'd37;   //ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½
//parameter  V_DISP   =  12'd1600;  //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½
//parameter  V_FRONT  =  12'd3;    //ï¿½ï¿½ï¿½ï¿½Ê¾Ç°ï¿½ï¿½
//parameter  V_TOTAL  =  12'd1646;  //ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//reg define
reg  [12:0] cnt_h;
reg  [12:0] cnt_v;
reg         video_en;

//*****************************************************
//**                    main code
//*****************************************************

assign video_de  = video_en;
assign video_hs  = ( cnt_h < H_SYNC ) ? 1'b0 : 1'b1;  //ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ÅºÅ¸ï¿½Öµ
assign video_vs  = ( cnt_v < V_SYNC ) ? 1'b0 : 1'b1;  //ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ÅºÅ¸ï¿½Öµ
//RGB888ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
assign video_rgb = video_de ? pixel_data : 24'd0; 

//Ê¹ï¿½ï¿½RGBï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
always @(posedge pixel_clk or negedge sys_rst_n) begin
	if(!sys_rst_n)
		video_en <= 1'b0;
	else
		video_en <= data_req;
end

//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Øµï¿½ï¿½ï¿½É«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
always @(posedge pixel_clk or negedge sys_rst_n) begin
	if(!sys_rst_n)
		data_req <= 1'b0;
	else if(((cnt_h >= H_SYNC + H_BACK - 2'd2) && (cnt_h < H_SYNC + H_BACK + H_DISP - 2'd2))
                  && ((cnt_v >= V_SYNC + V_BACK) && (cnt_v < V_SYNC + V_BACK+V_DISP)))
		data_req <= 1'b1;
	else
		data_req <= 1'b0;
end

//ï¿½ï¿½ï¿½Øµï¿½xï¿½ï¿½ï¿½ï¿½
always@ (posedge pixel_clk or negedge sys_rst_n) begin
    if(!sys_rst_n)
        pixel_xpos <= 13'd0;
    else if(data_req)
        pixel_xpos <= cnt_h + 2'd2 - H_SYNC - H_BACK ;
    else 
        pixel_xpos <= 13'd0;
end
    
//ï¿½ï¿½ï¿½Øµï¿½yï¿½ï¿½ï¿½ï¿½	
always@ (posedge pixel_clk or negedge sys_rst_n) begin
    if(!sys_rst_n)
        pixel_ypos <= 13'd0;
    else if((cnt_v >= (V_SYNC + V_BACK)) && (cnt_v < (V_SYNC + V_BACK + V_DISP)))
        pixel_ypos <= cnt_v + 1'b1 - (V_SYNC + V_BACK) ;
    else 
        pixel_ypos <= 13'd0;
end

//ï¿½Ð¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½Ó¼ï¿½ï¿½ï¿½
always @(posedge pixel_clk or negedge sys_rst_n) begin
    if (!sys_rst_n)
        cnt_h <= 13'd0;
    else begin
        if(cnt_h < H_TOTAL - 1'b1)
            cnt_h <= cnt_h + 1'b1;
        else 
            cnt_h <= 13'd0;
    end
end

//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¼ï¿½ï¿½ï¿½
always @(posedge pixel_clk or negedge sys_rst_n) begin
    if (!sys_rst_n)
        cnt_v <= 13'd0;
    else if(cnt_h == H_TOTAL - 1'b1) begin
        if(cnt_v < V_TOTAL - 1'b1)
            cnt_v <= cnt_v + 1'b1;
        else 
            cnt_v <= 13'd0;
    end
end

endmodule